# Velocity
# Administration is the exception, not the rule
# Lift and Ship
anyone tried to do Service Discovery across two or Three Kubernetes - you can't
it is not design for that. Kubernetes is design for Inter Cluster Service Discovery
# Kubernetes very basic secrets for bootstrapping things, bootstrap Kubernetes
itself, then encryption of REST and limiting what node can see


Kubernetes
    Open-shift  - Red Hat
    Lambda      - Amazon
    GKE         - Google Cloud may call it GKE plus some services

BeyondCorp. - in google, if you assume that it's going to be bad if someone is
     was insite of your network then pretend that someone is already inside your
     network and act accordingly

The mainframe, you want to proces census data - ultimate developer
     workflow in,out

Kubeflow   - this is a workflow or at least an opinionated workflow for
             doing machine-learning or some analytics work

Istio - maybe network should be smart
- Managing traffic flows between services
- Aggregating telemetry data
- Enforcing access policies
- Istio control plane (pilot, mixer, auth)
- Adaptors for backend infrastructure
- Envoy side-car

istioctl

# Vault HashCorp-

Hashinetes
|  CONSUL    |    VAULT   |
|  KUBERNETES             |       NOMAD  |
|  NETWORK |  INFRASTRUCTURE |  STORAGE  |

Thias are just interfases gives as compute and the way how we want to consume,
some schedulers gives as row machines that we want to ssh into, some schedulers
just run the app, we don't care about machine apstraction, in some cases 

Spi




# Kubernetes Frainwork

# Kubernetes CMDs
#------------------------------------------------------------------------------
docker ps
kubectl apply -f deployment/webapp.yml
kubectl create -f py.yml
kubectl create -f namespace.yml
kubectl create -f deployment/mysql.yml
kubectl create -f deployment/webapp.yml
kubectl create -f extensions/certificate.yml
kubectl create -f jobs/webapp-db-schema-load.yml
kubectl create -f jobs/webapp-db-schema-seed.yml    # get pass
kubectl create configmap nginx --from-file configs/lobsters.conf
kubectl delete namespace <Namespace name>
kubectl describe jobs/py                      # Example2; creating a job
kubectl describe namespace <Namespace name>
kubectl describe svc webapp                   # automaticaly, load balancer
kubectl get namespace <Namespace name>
kubectl get pods
kubectl get svc
kubectl get pvc           # get the storage - google cloud, persistent disk
kubectl get configmaps
watch kubectl get jobs
kubectl get secrets
kubectl log Testing_for_Image_pull            # gives me success or failure
kubectl logs <container name> -f 
kubectl svc                                   # service

spec:
 containers:
   - name: webapp
     image: github/version2.0.1
     env:
       -
    command:
      - "ls -la"
      - "run.sh"

# Resources limit - get app limits, we can get math, they not need to be monitor we give them contracts
resources:
  requests:
    cpu: 1
    memory: 16
  limits:
    cpu: 1
    memory: 16

# Stafefull state with volumes!  - storage is decapled from the machine
# in this scenario mount and unmount somewhere else
volumes:
  - name: mysql
  gceRersistentDisk:
    


VM 
# Openshift   - give me support, comfort
# Cloud       - Google Container Engine, Resorce Container Service
# Own Cloud   - 

disruptiveStartUp.io          - GCE
secretForeignGovtDept.xx      - 
genericWeatherService.com     -  


# Kubernetes extensions
#------------------------------------------------------------------------------
# to 
cat extensions/certificate.yml
apiVersion: extensions/v1beta1
kind: ThirdPartyResource
description: "A specification of a let's Encrypt Certificate to external https"
versions:
  - name: v1



# Kubernetes Service
#------------------------------------------------------------------------------
# service is a REST object in Kubernetes



# Kubernetes Namespace
#------------------------------------------------------------------------------
# Example5: namespace

apiVersion: v1
kind: Namespace
metadata:
  name: elasticsearch
  namespace: elk
  labels:
    com

# Kubernetes Labels & Selectors
#------------------------------------------------------------------------------
# Example4: Set-based selecors allow filtering of keys according to 
            a set of values

apiVersion :v1
kind: Service
metadata:
  name: sp-neo4j-standalone
spec:
  ports:
    - port: 7474
      name: neo4j
  type: NodePort
  selector:
    app: salesplatform
    component: neo4j



# Kubernetes Jobs
#------------------------------------------------------------------------------
# Example3 Scheduled Job "ps -eaf": every 30 min;
apiVersion: v1
kind: Job
metadata:
  name: py
spec:
  schedule: h/30 * * * *
  template:
    metadata
      name: py
    spec:
      containers:
      - name: py
        image: python
        args:
/bin/sh
-c
ps -eaf
        restartPolicy: OnFailure

# Example2: Creating a Job; template name is py; it will never restart itself

apiVersion: v1
kind: Job
metadata:
  name: py
spec:
  template:
    metadata
        name: py
    spec:
      containers:
      - name: py
        image: python
      command: ["python","SUCCESS"]
      restartPolicy: Never


# Kubernetes - Images
#------------------------------------------------------------------------------
# Each container in a pod has its Docker image running inside it
# Example1: Pull image from Docker registry and deploy in to Kubernetes conta

apiVersion: v1
kind: pod
metadata:
  name: Testing_for_Image_pull
    spec:
      containers:
      - name: neo4j-server
        image: <Name of the Docker Image>
        imagePullPolicy: Always
        command: ["echo","SUCCESS"]



# Kubernetes Setup
#------------------------------------------------------------------------------
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
...


# Kubernetes Architecture
#------------------------------------------------------------------------------
# Kubernetes Master
      - etcd          -key value store,can be distributed among multiple nodes
      - API Server    - act as communicator among different componets of Kub
      - Scheduler     - regulates the state of cluster and performs a task
                      - run in nonterminating loop;responsible for collecting 
                        and sending information to API
    - Controller Manager - multiple kind of controllers to handle nodes

# Kubernetes Nodes  (linux machines)
      - Docker        - running the encapsulated application containers
      - Kubelet       - responsible for relaying information to and from contrl
                      - manages pods on node, volumes, secrets
                      - creating new containers etc
    - KubernetesProxy - making service available to the external host
                      - manages networking part for nodes





# Kubernetes App Deployment
#------------------------------------------------------------------------------
converting images to containers and then allocating those images to pods in
the Kubernetes cluster. setting app, deployment of app, replication cont,
replica set

# Kubernetes Autoscaling in Cluster
#------------------------------------------------------------------------------
Supporte by GCE - Google Cloud Engine
            GKE - Google Container Engine
            AWS





#------------------------------------------------------------------------------




#------------------------------------------------------------------------------



